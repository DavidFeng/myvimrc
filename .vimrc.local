set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

" Tabularize {
    if isdirectory(expand("~/.vim/bundle/tabular"))
        nmap <c-c> :Tabularize /
        vmap <c-c> :Tabularize /
        nmap <Leader>d= :Tabularize /=<CR>
        vmap <Leader>d= :Tabularize /=<CR>
        nmap <Leader>d, :Tabularize /,<CR>
        vmap <Leader>d, :Tabularize /,<CR>
        nmap <Leader>d- :Tabularize /--<CR>
        vmap <Leader>d- :Tabularize /--<CR>
    endif
" }


" 覆盖掉默认的esc行为
inoremap <expr> <Esc>      pumvisible() ? "\<C-y>\<Esc>" : "\<Esc>"

" 覆盖掉默认的easy moving
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l
map <C-H> <C-W>h

nmap <F2> :tabprevious<CR>
nmap <F3> :tabnext<CR>

" 已经有这个选项了，我以为还要写一个函数呢，终于忍够了输入 :set paste的日子
set pastetoggle=<f4>

nnoremap <F5> "=strftime("%a %H:%M %b %d")<CR>p
inoremap <F5> <C-R>=strftime("%a %H:%M %b %d")<CR>

function! ToggleFdm()
  if &fdm == 'indent'
    set fdm=marker
  elseif &fdm == 'marker'
    set fdm=indent
  endif
endfunction

nnoremap <F6> :call ToggleFdm()<CR>
inoremap <F6> <Esc>:call ToggleFdm()<CR>

" to be used
" <F7> - <F10>
"
"      centos         macosx
" F11: full screen
" F12: hide menu

set textwidth=80
set colorcolumn=81
set wrap

set tabstop=2
set softtabstop=2 " 处理空格的时候就像是在处理tab一样,必开的选项
set shiftwidth=2 " 自动缩进时缩进的空格数量; with cindent, >> <<, etc.
set smarttab
set expandtab " 扩展tab with合适数量的空格
set shiftround

set foldmethod=marker

"noremap zo zO
"noremap zO zo
"noremap zc zC
"noremap zC zc


"let &showbreak='^'
"set list
"set listchars=tab:>·,trail:·

nmap U gU


function! Incr()
  let a = line('.') - line("'<")
  let c = virtcol("'<")
  if a > 0
    execute 'normal! '.c.'|'.a."\<C-a>"
  endif
  normal `<
endfunction
vnoremap <C-a> :call Incr()<CR>

let g:syntastic_asm_compiler='nasm'
